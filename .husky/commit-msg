#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

echo "📝 Validating commit message..."

# Read the commit message
commit_message=$(cat "$1")

# Check if it's a merge commit (skip validation)
if echo "$commit_message" | grep -q "^Merge "; then
  echo "🔄 Merge commit detected, skipping validation"
  exit 0
fi

# Check if it's a revert commit (skip validation)
if echo "$commit_message" | grep -q "^Revert "; then
  echo "⏪ Revert commit detected, skipping validation"
  exit 0
fi

# Conventional commit pattern
# type(scope): description
# where scope is optional
pattern="^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\(.+\))?: .{1,72}$"

# Extract the first line (commit title)
first_line=$(echo "$commit_message" | head -n1)

# Validate the commit message format
if ! echo "$first_line" | grep -qE "$pattern"; then
  echo "❌ Invalid commit message format!"
  echo ""
  echo "Expected format: type(scope): description"
  echo "Examples:"
  echo "  feat: add user authentication"
  echo "  fix(auth): resolve login validation error"
  echo "  docs: update API documentation"
  echo "  test(user): add integration tests"
  echo ""
  echo "Valid types: feat, fix, docs, style, refactor, perf, test, build, ci, chore, revert"
  echo "Scope is optional but should be lowercase"
  echo "Description should be lowercase and under 72 characters"
  echo ""
  echo "Your commit message: '$first_line'"
  echo ""
  echo "Please follow the conventional commit format."
  echo "See: https://www.conventionalcommits.org/"
  exit 1
fi

# Check for proper case
if echo "$first_line" | grep -qE "^[A-Z]"; then
  # Extract the description part (after the colon)
  description=$(echo "$first_line" | sed 's/^[^:]*: //')
  if echo "$description" | grep -qE "^[A-Z]"; then
    echo "⚠️  Warning: Description should start with lowercase"
    echo "Example: 'feat: add feature' not 'feat: Add feature'"
  fi
fi

# Check for trailing period
if echo "$first_line" | grep -q '\.$'; then
  echo "⚠️  Warning: Commit message should not end with a period"
fi

# Check length
if [ ${#first_line} -gt 72 ]; then
  echo "⚠️  Warning: Commit message is longer than 72 characters (${#first_line})"
  echo "Consider shortening it for better readability"
fi

# Check for empty description
description=$(echo "$first_line" | sed 's/^[^:]*: //')
if [ ${#description} -lt 3 ]; then
  echo "❌ Description too short! Please provide a meaningful description."
  exit 1
fi

# Success message
echo "✅ Commit message format is valid!"

# Show commit type
commit_type=$(echo "$first_line" | sed 's/:.*$//' | sed 's/(.*//')
case $commit_type in
  "feat")
    echo "✨ Adding new feature"
    ;;
  "fix")
    echo "🐛 Fixing a bug"
    ;;
  "docs")
    echo "📝 Updating documentation"
    ;;
  "style")
    echo "🎨 Improving code style"
    ;;
  "refactor")
    echo "♾️ Refactoring code"
    ;;
  "perf")
    echo "⚡ Improving performance"
    ;;
  "test")
    echo "🧪 Adding or updating tests"
    ;;
  "build")
    echo "🔧 Updating build system"
    ;;
  "ci")
    echo "🛠️ Updating CI configuration"
    ;;
  "chore")
    echo "🧽 Maintenance tasks"
    ;;
  "revert")
    echo "⏪ Reverting changes"
    ;;
esac

echo "🚀 Ready to commit!"
