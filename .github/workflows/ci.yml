name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: # Allow manual triggering

env:
  NODE_VERSION: '18.x'
  MONGODB_VERSION: '6.0'

jobs:
  # 📊 Code Quality Checks
  quality-checks:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better analysis

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          npm ci
          npm audit --audit-level moderate

      - name: 🎨 ESLint Check
        run: |
          npm run lint
          npm run lint -- --format=json --output-file=eslint-results.json || true

      - name: 📝 Prettier Check
        run: npm run format -- --check

      - name: 🔒 Security Audit
        run: npm audit --audit-level high
        continue-on-error: true

      - name: 📊 Upload ESLint Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: eslint-results
          path: eslint-results.json

  # 🧪 Test Suite
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        node-version: ['16.x', '18.x', '20.x']
    
    services:
      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --quiet --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: ⚙️ Setup Test Environment
        run: |
          cp .env.example .env.test
          echo "MONGODB_URI=mongodb://localhost:27017/nodejs_template_test" >> .env.test
          echo "JWT_SECRET=test-jwt-secret-key-for-ci" >> .env.test
          echo "NODE_ENV=test" >> .env.test
        env:
          NODE_ENV: test

      - name: 🧪 Run Unit Tests
        run: npm test
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/nodejs_template_test

      - name: 📈 Generate Test Coverage
        run: npm run test:coverage
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/nodejs_template_test

      - name: 📁 Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: coverage-${{ matrix.node-version }}
          fail_ci_if_error: false

      - name: 📊 Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.node-version }}
          path: |
            coverage/
            test-results.xml

  # 📝 Commit Message Validation
  commit-lint:
    name: 📝 Commit Lint
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    timeout-minutes: 5
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install Commitlint
        run: |
          npm install -g @commitlint/cli @commitlint/config-conventional
          echo "module.exports = {extends: ['@commitlint/config-conventional']}" > commitlint.config.js

      - name: 📝 Validate Commit Messages
        run: |
          commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --verbose

  # 🔍 Security Scan
  security-scan:
    name: 🔍 Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🔍 Run Security Audit
        run: |
          npm audit --audit-level moderate --json > security-audit.json || true
          npm audit --audit-level moderate
        continue-on-error: true

      - name: 🔒 Snyk Security Test
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: 📊 Upload Security Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-results
          path: |
            security-audit.json
            snyk.sarif

  # 🚀 Build Test
  build:
    name: 🚀 Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [quality-checks, test]
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci --production

      - name: 🚀 Test Production Build
        run: |
          npm run build || echo "No build script defined"
          node -e "console.log('Production dependencies loaded successfully')"

      - name: 🐳 Build Docker Image (Test)
        run: |
          docker build -t nodejs-template:test .
          docker run --rm nodejs-template:test node --version

  # 📁 Deployment Readiness
  deployment-check:
    name: 📁 Deployment Readiness
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [quality-checks, test, security-scan, build]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: ✅ Deployment Ready
        run: |
          echo "🎉 All checks passed!"
          echo "🚀 Ready for deployment"
          echo "## Deployment Status 🚀" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|"
          echo "| Code Quality | ✅ Passed |"
          echo "| Tests | ✅ Passed |"
          echo "| Security | ✅ Passed |"
          echo "| Build | ✅ Passed |"
          echo "| **Ready for Deployment** | 🚀 **YES** |" >> $GITHUB_STEP_SUMMARY

  # 📊 Status Report
  status-report:
    name: 📊 Status Report
    runs-on: ubuntu-latest
    if: always()
    needs: [quality-checks, test, commit-lint, security-scan, build]
    
    steps:
      - name: 📋 Generate Status Report
        run: |
          echo "## CI/CD Pipeline Results 📈" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|"
          echo "| Code Quality | ${{ needs.quality-checks.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Commit Lint | ${{ needs.commit-lint.result == 'success' && '✅ Passed' || (needs.commit-lint.result == 'skipped' && '⏭️ Skipped' || '❌ Failed') }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '⚠️ Warning' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Test | ${{ needs.build.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.quality-checks.result }}" == "success" && "${{ needs.test.result }}" == "success" && "${{ needs.build.result }}" == "success" ]]; then
            echo "\n🎉 **Overall Status: PASSED** 🎉" >> $GITHUB_STEP_SUMMARY
          else
            echo "\n❌ **Overall Status: FAILED** ❌" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "\n### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Check individual job logs for details" >> $GITHUB_STEP_SUMMARY
          echo "- Review test coverage reports" >> $GITHUB_STEP_SUMMARY
          echo "- Address any security findings" >> $GITHUB_STEP_SUMMARY

# 🗺 Workflow Summary
# This workflow provides comprehensive CI/CD pipeline with:
# 1. Code quality checks (ESLint, Prettier)
# 2. Multi-version testing (Node.js 16, 18, 20)
# 3. Commit message validation
# 4. Security scanning
# 5. Build verification
# 6. Deployment readiness check
# 7. Comprehensive status reporting
